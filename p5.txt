 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
 954
 ** ¿Cuánto tiempo dura la captura?
 56 segundos
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
192.168.1.34 --privada-- porque esta en el rango de ips privadas

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
UDP Si porque es mas rapido ya que no se usan retransmisiones ni asentimientos
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
Ethernet, Udp, Stun, Sip, RTP, RTCP, DNS, TCP, HTTP, ICMP, ARP

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
en el 7, 13, 15, 37, 54
 ** Y los paquetes con RTP, ¿cuándo se envían?
del 16-17 al 38


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
 DNS
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
 80.58.61.250
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
 86.64.162.35
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
porque tambien busca la IP en modo inverso(es la IP anterior)

6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
 get /ip http 1.1 puesto que se lo pide a ekiga: ekiga.net/ip
 ** ¿Qué user agent (UA) la está pidiendo?
 el que actua en la direccion privada
 ** ¿Qué devuelve el servidor?
 un 200 OK con la siguiente direccion: 83.36.48.212 **********************PREG
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
nuestra ip publica


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
 Porque es el protocolo que permite con nat encontrar su IP publica y conocer que tipo de nat tiene.
 Para descubrir que tipo de NAT utiliza
 ** ¿Estamos tras un NAT?
SI

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
 86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
 5060 por defecto y en este caso tambien
 ** ¿Qué método SIP utiliza el UA para registrarse?
 el REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
Dentro de sip en la cabecera: Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
 No inicialmente ya que no esta registrado
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
 Cuando te mandan un 200 OK
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
 El segundo es mas grande pues lleva los datos de la autentificacion
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
 3600


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
 SI: From: "Gregorio Robles" <sip:grex@ekiga.net>;
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
 Esta en formato SDP y contiene la descripcion de la sesion con todos sus media attributes
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
 No porque hay un 407, un request de la autenticacion al proxy
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
En el tamaño, pasa lo mismo que anteriormente hay que autorizarse, esta vez con el proxy

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
 H261 y RTP, el primero es un estandar de codec mientras que el segundo se utiliza para
 la transmision de audio y video en tiempo real, tambien al final hay un par de paquetes de RTCP que se usan para señalizar datos de control
 ** ¿Cuál es el tamaño de paquete de los mismos?
 214 todos los RTP, 43 todos los RTCP y en el H261 en torno a 1050 el primero del par, y entre 200 y 500 el segundo
 ** ¿Se utilizan bits de padding?
 No parece pues siempre esta a false
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
 20 ms
 ** ¿Cuántos bits/segundo estamos enviando?
64 kbits/seg


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
 2, uno para video y otro para audio
 ** ¿Cuántos paquetes se pierden?
 0
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
 1290,444 y 1290,490
 la diferencia entre cuando llego un paquete con el anterior
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
Sentido A: 183,096max y 153,240 media
Sentido B: 119,635max y 42,5 media
Calidad alta sobretodo en sentido B

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
0
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
 NO ,el jitter es 0 por lo que sabemos que es el primero que ha llegado, pero no si es el primero enviado
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
 247
 ** ¿A qué se debe el cambio tan brusco del jitter?
 A que al tener un cambio tan brusco en el retardo de uno de los paquetes, la varianza cambia al funcionar como media ponderada
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
Si pues el jitter es la varianza entre tiempos de retardo, la diferencia de cuando llega un paquete a el siguiente lo va marcando
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
Contestado en pregunta anterior.

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
 24 segundos
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
 No hat CSRCs,
SSRCs = 0xbf4afd37 y 0x43306582 para cada uno de los puertos(audio y video)

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
 BYE
 ** ¿En qué trama(s)?
 924,925,927 y 933
 ** ¿Por qué crees que se envía varias veces?
Porque todavía no le ha llegado el 200 OK

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 Para borrarlo del registro lleva expire:0
 ** ¿En qué trama sucede esto?
 950 y 952
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
El expire = 0


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 2
 ** ¿Cuál es su periodicidad?
 20ms
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 No pues solo tengo el sip en estos momentos.
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 Si, en el apartado de voz IP hay un apartado llamado play stream
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
 No, solo tengo el SIP



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
